// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// frobenius_norm
double frobenius_norm(arma::mat mat1, arma::mat mat2);
RcppExport SEXP GERGM_frobenius_norm(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(frobenius_norm(mat1, mat2));
    return __result;
END_RCPP
}
// Metropolis_Hastings_Sampler
List Metropolis_Hastings_Sampler(int number_of_iterations, double shape_parameter, int number_of_nodes, arma::vec statistics_to_use, arma::mat initial_network, int take_sample_every, arma::vec thetas, arma::mat triples, arma::mat pairs, arma::vec alphas, int together, int seed, int number_of_samples_to_store, int using_correlation_network, int undirect_network);
RcppExport SEXP GERGM_Metropolis_Hastings_Sampler(SEXP number_of_iterationsSEXP, SEXP shape_parameterSEXP, SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP initial_networkSEXP, SEXP take_sample_everySEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP seedSEXP, SEXP number_of_samples_to_storeSEXP, SEXP using_correlation_networkSEXP, SEXP undirect_networkSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type shape_parameter(shape_parameterSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_network(initial_networkSEXP);
    Rcpp::traits::input_parameter< int >::type take_sample_every(take_sample_everySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_samples_to_store(number_of_samples_to_storeSEXP);
    Rcpp::traits::input_parameter< int >::type using_correlation_network(using_correlation_networkSEXP);
    Rcpp::traits::input_parameter< int >::type undirect_network(undirect_networkSEXP);
    __result = Rcpp::wrap(Metropolis_Hastings_Sampler(number_of_iterations, shape_parameter, number_of_nodes, statistics_to_use, initial_network, take_sample_every, thetas, triples, pairs, alphas, together, seed, number_of_samples_to_store, using_correlation_network, undirect_network));
    return __result;
END_RCPP
}
// weighted_mple_objective
double weighted_mple_objective(int number_of_nodes, arma::vec statistics_to_use, arma::mat current_network, arma::vec thetas, arma::mat triples, arma::mat pairs, arma::vec alphas, int together, arma::vec integration_interval);
RcppExport SEXP GERGM_weighted_mple_objective(SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP current_networkSEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP integration_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type current_network(current_networkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type integration_interval(integration_intervalSEXP);
    __result = Rcpp::wrap(weighted_mple_objective(number_of_nodes, statistics_to_use, current_network, thetas, triples, pairs, alphas, together, integration_interval));
    return __result;
END_RCPP
}
